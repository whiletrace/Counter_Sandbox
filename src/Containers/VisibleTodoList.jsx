// module imports of note is withRouter
import { withRouter } from 'react-router'
import { connect } from 'react-redux'
import React, { Component, PropTypes } from 'react'
import { getVisibleTodos } from '../redux/RootReducer'
import * as actions from '../Actions/actions'
import TodoList from '../Components/TodoList'


// Original implementation of VisibleTodoList

/*
class VisibleTodoList extends React.Component {
  componentDidMount() {
    const { store } = this.context
    this.unsubscribe = store.subscribe(() =>
       this.forceUpdate()
      )
  }
  componentWillUnmount() {
    this.unsubscribe()
  }
  render() {
    const props = this.props
    const { store } = this.context
    const state = store.getState()
    return (
      <TodoList
        todos = {
          getVisibleTodos(
           state.todos,
           state.visibilityFilter
            )
        }
        onTodoClick = { id =>
         store.dispatch({
        type: 'TOGGLE_TODO',
        id,
      })
    }
    />
      )
  }
}
VisibleTodoList.contextTypes = {
  store: React.PropTypes.object
}
*/

// const mapDispatchToProps = (dispatch) => ({
// onTodoClick: (id) => {
// dispatch(toggleTodo(id))
// },
// })

// New implementation

// getVisibleTodos now the colocated selector
// encapsulates the whole application state shape
// passing the whole application state
// will decide how to select active/completed todos (filter argument)
// based on the logic of getVisibleTodos selector


// original implementation of  visibilityFilter now Router is handling via params and
// withRouter to pass visibilityFilter via props
 /*
 const visibilityFilter = (
  state = 'SHOW_ALL',
  action
  ) => {
  switch (action.type) {
    case 'SET_VISIBLITY_FILTER':
      return action.filter
    default: return state
  }
}
*/

// Class component enhances pres component TodoList
// provides data fetching logic
class VisibleTodoList extends Component {

// fetches initial data
  componentDidMount() {
    this.fetchData()
  }
// fetches on filter prop provided by react router changes
  componentDidUpdate(prevProps) {
    if (this.props.filter !== prevProps.filter) {
      this.fetchData()
    }
  }

// common code between lifecycle hooks extracted to create a new method
// fetchTodos and recieveodos imported as namespace imports from actions
  fetchData() {
    const { filter, fetchTodos } = this.props
    fetchTodos(filter)
  }

  render() {
    const { toggleTodo, ...rest } = this.props
    return (
      <TodoList
        {...rest}
        onTodoClick={toggleTodo}
      />
    )
  }
}
// params are passed via the withRouter function
// component generated by with router subscribes to par
// params are passed via the withRouter function
// creates object with key todos
// method that calls function getVisibleTodos
const mapStateToProps = (state, { params }) => {
  const filter = params.filter || 'all'
  return {
    todos: getVisibleTodos(state, filter),
    filter,
  }
}
// Props validation
VisibleTodoList.propTypes = {
  filter: PropTypes.oneOf(['all', 'active', 'completed']).isRequired,
  fetchTodos: PropTypes.func.isRequired,
  toggleTodo: PropTypes.func.isRequired,
}

// generating a container component that injects the redux state tree
// map dispatch to props shorthand
// when arguments from the action creator
// and call back props match exactly
// connect function subscribes
// components to store injecting store data
// and lets component dispatch actions
VisibleTodoList = withRouter(connect(
 mapStateToProps,
 actions,
  )(VisibleTodoList))

// exported to module App
export default VisibleTodoList
