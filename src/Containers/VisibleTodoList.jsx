// module imports of note is withRouter
import { withRouter } from 'react-router'
import { connect } from 'react-redux'
import React, { Component, PropTypes } from 'react'
import { getVisibleTodos, getErrorMessage, getIsFetching } from '../redux/RootReducer'
import * as actions from '../Actions/actions'
import TodoList from '../Components/TodoList'
import FetchError from '../Components/FetchError'

// Class component enhances pres component TodoList
// provides data fetching logic
class VisibleTodoList extends Component {

// fetches initial data
  componentDidMount() {
    this.fetchData()
  }
// fetches on filter prop provided by react router changes
  componentDidUpdate(prevProps) {
    if (this.props.filter !== prevProps.filter) {
      this.fetchData()
    }
  }

// common code between lifecycle hooks extracted to create a new method
// fetchTodos and recieveodos imported as namespace imports from actions
  fetchData() {
    const { filter, fetchTodos } = this.props
    fetchTodos(filter).then(() => console.log('Yeah these are loaded!')) // eslint-disable-line no-console
  }

  render() {
    const { toggleTodo, todos, errorMessage, isFetching } = this.props
    if (isFetching && !todos.length) {
      return <p> loading...</p>
    }
    if (errorMessage && !todos.length) {
      return (
        <FetchError
          message={errorMessage}
          onRetry={() => this.fetchData()}
        />
      )
    }
    return (
      <TodoList
        todos={todos}
        onTodoClick={toggleTodo}
        isFetching={isFetching}
      />
    )
  }
}
// params are passed via the withRouter function
// component generated by with router subscribes to params
// params are passed via the withRouter function
// creates object with key todos
// method that calls function getVisibleTodos
const mapStateToProps = (state, { params }) => {
  const filter = params.filter || 'all'
  return {
    todos: getVisibleTodos(state, filter),
    errorMessage: getErrorMessage(state, filter),
    isFetching: getIsFetching(state, filter),
    filter,
  }
}
// Props validation
VisibleTodoList.propTypes = {
  todos: PropTypes.arrayOf(
    PropTypes.shape({
      completed: PropTypes.bool,
      id: PropTypes.string,
      text: PropTypes.string,
    }).isRequired,
  ).isRequired,
  isFetching: PropTypes.bool.isRequired,
  filter: PropTypes.oneOf(['all', 'active', 'completed']).isRequired,
  fetchTodos: PropTypes.func.isRequired,
  toggleTodo: PropTypes.func.isRequired,
  errorMessage: PropTypes.string,
}

VisibleTodoList.defaultProps = {
  errorMessage: 'This just blew up',
}


// generating a container component that injects the redux state tree
// map dispatch to props shorthand
// when arguments from the action creator
// and call back props match exactly
// connect function subscribes
// components to store injecting store data
// and lets component dispatch actions
VisibleTodoList = withRouter(connect( // eslint-disable-line no-class-assign
 mapStateToProps,
 actions,
  )(VisibleTodoList))

// exported to module App
export default VisibleTodoList
